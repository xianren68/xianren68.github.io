import{_ as t,c as s,o as i,a2 as a}from"./chunks/framework.C62L6tH-.js";const d="/assets/172c5b67facf3245~tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0.D9XTvZ0a.webp",l="/assets/1721c29b24233ffb~tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0.Cwi7eI2w.webp",u=JSON.parse('{"title":"02_基本类型与运算符","description":"","frontmatter":{},"headers":[],"relativePath":"go/base/markdown/02.md","filePath":"go/base/markdown/02.md"}'),e={name:"go/base/markdown/02.md"},n=a('<h1 id="_02-基本类型与运算符" tabindex="-1">02_基本类型与运算符 <a class="header-anchor" href="#_02-基本类型与运算符" aria-label="Permalink to &quot;02_基本类型与运算符&quot;">​</a></h1><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h2><p><img src="'+d+`" alt="基本类型"></p><h3 id="bool" tabindex="-1">bool <a class="header-anchor" href="#bool" aria-label="Permalink to &quot;bool&quot;">​</a></h3><blockquote><p>布尔类型，只有<code>true</code>或<code>false</code>两个值,占用一个字节的内存</p></blockquote><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SshUf" id="tab-tfRVksP" checked="checked"><label for="tab-tfRVksP">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a,b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div></div></div><h3 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h3><table><thead><tr><th>数据类型</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>有符号整数</td><td></td><td></td></tr><tr><td>int8</td><td>有符号 8位整数</td><td>-128到 127</td></tr><tr><td>int16</td><td>有符号 16位整数</td><td>-32768 到32767</td></tr><tr><td>int32</td><td>有符号 32位整数</td><td>-2147483648到2147483647</td></tr><tr><td>int64</td><td>有符号 64位整数</td><td>-9223372036854775808到9223372036854775807</td></tr><tr><td>无符号整数</td><td></td><td></td></tr><tr><td>uint8</td><td>无符号8位整数</td><td>0到255</td></tr><tr><td>uint16</td><td>无符号16位整数</td><td>0到65535</td></tr><tr><td>uint32</td><td>无符号32位整数</td><td>0到4294967295</td></tr><tr><td>uint64</td><td>无符号64位整数</td><td>0到18446744073709551615</td></tr></tbody></table><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-669Cn" id="tab-cY4FakQ" checked="checked"><label for="tab-cY4FakQ">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// used, by convention, to distinguish byte values from 8-bit unsigned</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// integer values.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// used, by convention, to distinguish character values from integer values.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rune</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><blockquote><p>如上，字节类型<code>byte = uint8</code> 类型，<code>rune = int32</code>,这段代码可以在<code>src/builtin/builtin.go</code>中找到</p></blockquote></div><h3 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h3><blockquote><p>字符串的概念就是多个byte的集合，一个字符序列用双引号&quot;&quot;，或者\`\` (esc下面的键) 表示。</p></blockquote><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--q4Zi" id="tab-LeID2M1" checked="checked"><label for="tab-LeID2M1">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xianren&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;类型</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%T\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;类型</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// int32</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过len函数可以查看字符串的长度，也可以通过索引获取对应位置的ascall码值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name), name[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//7 ，97</span></span></code></pre></div></div></div><blockquote><p>单引号包裹的一般为字符类型，即<code>rune</code>,但通过索引从字符串获取到的是<code>byte</code>类型，通过<code>len()</code>获取的也是<code>byte</code>的个数,而不是我们看到的字符的个数，如下例子</p></blockquote><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2HMoM" id="tab-eGVzmK4" checked="checked"><label for="tab-eGVzmK4">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;李二&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>go语言字符串使用utf-8编码，一个中文字符需要三个字节来表示,所以在含有非ascall码字符时，不要直接从字符串中通过索引获取字符,可以将它转化成字符数组来获取</p></div><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-XQDuf" id="tab-WaaUsYw" checked="checked"><label for="tab-WaaUsYw">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">李二</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rune</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [26446 20108]</span></span></code></pre></div></div></div><h3 id="float" tabindex="-1">float <a class="header-anchor" href="#float" aria-label="Permalink to &quot;float&quot;">​</a></h3><table><thead><tr><th>单精度 浮点类型</th><th></th><th>取值范围</th></tr></thead><tbody><tr><td>float32</td><td>负数时</td><td>-3.402823E38 到 -1.401298E-45</td></tr><tr><td>float32</td><td>正数时</td><td>1.401298E-45 到 3.402823E38</td></tr></tbody></table><table><thead><tr><th>双精度 浮点类型</th><th>取值范围</th></tr></thead><tbody><tr><td>float64</td><td>-1.79E+308 到 +1.79E+308</td></tr></tbody></table><h4 id="单精度双精度两者区别" tabindex="-1">单精度双精度两者区别 <a class="header-anchor" href="#单精度双精度两者区别" aria-label="Permalink to &quot;单精度双精度两者区别&quot;">​</a></h4><blockquote><ol><li>在内存中占有的字节数不同 单精度浮点数在机内占4个字节。 双精度浮点数在机内占8个字节。</li><li>有效数字位数不同 单精度浮点数 有效数字7位。 双精度浮点数 有效数字16位。</li><li>使用情况区别 一般用来表示美元和分的时候用单精度类型。 超出人类经验的数字函数，例如 sin() cos() tan() sqrt() 都使用双精度值。</li></ol></blockquote><h3 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h3><blockquote><p>go 语言是静态语言，要求，定义、赋值、 运算、类型一致才能进行操作。所以要进行操作的时候必须保证数据类型一致。需要注意的是，只有兼容的数据类型才能够转换。 强制类型转换的语法 <code>Type(value)</code></p></blockquote><p>数值间转换</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-yhFtW" id="tab-MP8pgrA" checked="checked"><label for="tab-MP8pgrA">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 44</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类型一致时才能运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span></code></pre></div></div></div><p>浮点型转整型</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-dGOyN" id="tab--aJWVfK" checked="checked"><label for="tab--aJWVfK">go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.345</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 只保留整数部分</span></span></code></pre></div></div></div><blockquote><p>与字符串之间的互相转换，在下一节会讲到</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里没有介绍复数类型</p></div><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><blockquote><p>程序在运行过程中执行数学运算时候需要算数运算符。</p></blockquote><table><thead><tr><th>运算符</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>表示相加</td><td>5+2 =7</td></tr><tr><td>-</td><td>相减</td><td>5-2 =3</td></tr><tr><td>*</td><td>相乘</td><td>5*2 =10</td></tr><tr><td>/</td><td>相除 取商</td><td>5/3 = 1</td></tr><tr><td>%</td><td>相除 取余数</td><td>5%3= 2</td></tr><tr><td>++</td><td>自身加1</td><td>5++ =6</td></tr><tr><td>--</td><td>自身减1</td><td>5-- =4</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-label="Permalink to &quot;关系运算符&quot;">​</a></h3><blockquote><p>关系运算符的结果是bool类型的</p></blockquote><table><thead><tr><th>运算符</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>比较相等</td><td>10==10 结果 true</td></tr><tr><td>!=</td><td>比较不等</td><td>10 !=10 结果 false</td></tr><tr><td>是否大于</td><td></td><td>100&gt;1 结果 true</td></tr><tr><td>&lt;</td><td>是否小于</td><td>100&lt;1 结果 false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>100&gt;=100 结果 true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>100&gt;=101 结果 false</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><table><thead><tr><th>标识符</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>操作数都为真才为真 有一个为假就为假（一假则假，全真为真）</td></tr><tr><td>II</td><td>逻辑或</td><td>操作数有一个为真就为真（一真为真，全假为假）</td></tr><tr><td>!</td><td>逻辑非</td><td>相反方向则为真（假为真 真为假）</td></tr></tbody></table><h3 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h3><p><img src="`+l+`" alt="位运算符"></p><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>把等号右侧的数值 赋给左边的变量</td></tr><tr><td>+=</td><td>自身加上后面的值 再赋给左边的变量</td></tr><tr><td>-=</td><td>自身减去后面的值 在赋给左边</td></tr><tr><td>/=</td><td>自身除后面的值 再赋值给左边</td></tr><tr><td>%=</td><td>自身与后面的值求余数后 再赋值给左边</td></tr><tr><td>&lt;&lt;=</td><td>左移后再赋值</td></tr><tr><td>&gt;&gt;=</td><td>右移后再赋值</td></tr><tr><td>&amp;=</td><td>按位与后再赋值</td></tr><tr><td>I=</td><td>按位或 后再赋值</td></tr><tr><td>^=</td><td>按位异或后再赋值</td></tr></tbody></table><h3 id="占位字符" tabindex="-1">占位字符 <a class="header-anchor" href="#占位字符" aria-label="Permalink to &quot;占位字符&quot;">​</a></h3><blockquote><p>占位符表示在程序中输出一行字符串时候，或者格式化输出字符串的时候使用。go内置包fmt中Printf方法可以在控制台格式化打印出用户输入的内容。fmt.Printf(&quot;%T&quot;,x)</p></blockquote><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%d</td><td>十进制的数字</td><td>fmt.Printf(&quot;%d&quot;,10)</td><td>10</td></tr><tr><td>%T</td><td>取类型</td><td>b :=true fmt.Printf(&quot;%T&quot;,b)</td><td>bool</td></tr><tr><td>%s</td><td>取字符串</td><td>s :=&quot;123&quot; fmt.Printf(&quot;%s&quot;,s)</td><td>123</td></tr><tr><td>%t</td><td>取bool类型的值</td><td>b:=true fmt.Printf(&quot;%t&quot;,b)</td><td>true</td></tr><tr><td>%p</td><td>取内存地址</td><td>p :=&quot;123&quot; fmt.Printf(&quot;%p&quot;, &amp;p)</td><td>0xc0000461f0</td></tr><tr><td>%b</td><td>二进制的数字</td><td>fmt.Printf(&quot;%b&quot;,5)</td><td>101</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意: go语言中也有<code>++</code>,<code>--</code>,这两个运算符,但它们与c系语法不同,只能位于变量后,且是语句而非表达式</p></div><blockquote><p>以js做对比</p></blockquote><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-BXzl7" id="tab-4jB6lt4" checked="checked"><label for="tab-4jB6lt4">go</label><input type="radio" name="group-BXzl7" id="tab-n1bhnsK"><label for="tab-n1bhnsK">js</label><input type="radio" name="group-BXzl7" id="tab-WUUM2iZ"><label for="tab-WUUM2iZ">js</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 等价于 a+=1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10  先赋值后++，先将值交给log打印，然后再+1</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11 先++再赋值，先自增1，然后再交给log打印</span></span></code></pre></div></div></div>`,49),h=[n];function p(k,r,o,c,g,b){return i(),s("div",null,h)}const y=t(e,[["render",p]]);export{u as __pageData,y as default};
