import{_ as a,c as e,o as t,a2 as o}from"./chunks/framework.C62L6tH-.js";const p=JSON.parse('{"title":"js","description":"","frontmatter":{},"headers":[],"relativePath":"interview/markdown/js.md","filePath":"interview/markdown/js.md"}'),r={name:"interview/markdown/js.md"},s=o('<h1 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h1><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><h3 id="_1-如何产生闭包" tabindex="-1">1. 如何产生闭包？ <a class="header-anchor" href="#_1-如何产生闭包" aria-label="Permalink to &quot;1. 如何产生闭包？&quot;">​</a></h3><blockquote><p>闭包就是一个外部函数返回了一个内部函数，这个被返回的内部函数中还引用着外部函数的值，可以被内部函数访问</p></blockquote><h3 id="_2-闭包的使用场景" tabindex="-1">2. 闭包的使用场景 <a class="header-anchor" href="#_2-闭包的使用场景" aria-label="Permalink to &quot;2. 闭包的使用场景&quot;">​</a></h3><blockquote><p>防抖，节流函数，还有函数式编程中的函数柯里化，聚合函数等的实现也可能需要用到闭包</p></blockquote><h3 id="_3-闭包的内存泄露如何处理" tabindex="-1">3. 闭包的内存泄露如何处理 <a class="header-anchor" href="#_3-闭包的内存泄露如何处理" aria-label="Permalink to &quot;3. 闭包的内存泄露如何处理&quot;">​</a></h3><blockquote><p>在最后一次执行内部函数后，将引用的值置空</p></blockquote>',8),i=[s];function n(c,l,_,d,h,u){return t(),e("div",null,i)}const b=a(r,[["render",n]]);export{p as __pageData,b as default};
