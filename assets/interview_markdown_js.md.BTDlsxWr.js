import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.C62L6tH-.js";const g=JSON.parse('{"title":"js","description":"","frontmatter":{},"headers":[],"relativePath":"interview/markdown/js.md","filePath":"interview/markdown/js.md"}'),n={name:"interview/markdown/js.md"},t=e(`<h1 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h1><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><h3 id="_1-如何产生闭包" tabindex="-1">1. 如何产生闭包？ <a class="header-anchor" href="#_1-如何产生闭包" aria-label="Permalink to &quot;1. 如何产生闭包？&quot;">​</a></h3><blockquote><p>闭包就是一个外部函数返回了一个内部函数，这个被返回的内部函数中还引用着外部函数的值，可以被内部函数访问</p></blockquote><h3 id="_2-闭包的使用场景" tabindex="-1">2. 闭包的使用场景 <a class="header-anchor" href="#_2-闭包的使用场景" aria-label="Permalink to &quot;2. 闭包的使用场景&quot;">​</a></h3><blockquote><p>防抖，节流函数，还有函数式编程中的函数柯里化，聚合函数等的实现也可能需要用到闭包</p></blockquote><h3 id="_3-闭包的内存泄露如何处理" tabindex="-1">3. 闭包的内存泄露如何处理 <a class="header-anchor" href="#_3-闭包的内存泄露如何处理" aria-label="Permalink to &quot;3. 闭包的内存泄露如何处理&quot;">​</a></h3><blockquote><p>在最后一次执行内部函数后，将引用的值置空</p></blockquote><h3 id="_4-weak代表什么意思" tabindex="-1">4. weak代表什么意思？ <a class="header-anchor" href="#_4-weak代表什么意思" aria-label="Permalink to &quot;4. weak代表什么意思？&quot;">​</a></h3><blockquote><p>weak代表弱引用，弱引用不会阻止被引用的对象被垃圾回收器回收</p></blockquote><h3 id="_5-map和对象的区别" tabindex="-1">5. map和对象的区别 <a class="header-anchor" href="#_5-map和对象的区别" aria-label="Permalink to &quot;5. map和对象的区别&quot;">​</a></h3><h4 id="_1-键的类型" tabindex="-1">1. 键的类型 <a class="header-anchor" href="#_1-键的类型" aria-label="Permalink to &quot;1. 键的类型&quot;">​</a></h4><blockquote><p><code>Map</code>的键支持任何类型 <code>Object</code>支持<code>string</code>和<code>symbol</code>,非<code>string</code>类型的值会调用<code>.toString()</code>转化为字符串</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Map(2) { { b: 1 } =&gt; 1, { a: 1 } =&gt; 2 }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o[a] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o[b] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [object Object]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { &#39;[object Object]&#39;: 2 }</span></span></code></pre></div><h4 id="_2-迭代顺序" tabindex="-1">2. 迭代顺序 <a class="header-anchor" href="#_2-迭代顺序" aria-label="Permalink to &quot;2. 迭代顺序&quot;">​</a></h4><blockquote><p><code>Map</code>保证迭代顺序与插入顺序一致， <code>Object</code>无法保证</p></blockquote><h4 id="_3-获取大小和性能" tabindex="-1">3. 获取大小和性能 <a class="header-anchor" href="#_3-获取大小和性能" aria-label="Permalink to &quot;3. 获取大小和性能&quot;">​</a></h4><blockquote><p><code>Map</code>可以直接通过<code>.size</code>属性获取长度，而<code>Object</code>必须通过<code>Object.keys(O).length</code>这样的间接方式获取 在频繁的插入删除中，<code>Map</code>的性能更好</p></blockquote><h4 id="_4-原型链干扰" tabindex="-1">4. 原型链干扰 <a class="header-anchor" href="#_4-原型链干扰" aria-label="Permalink to &quot;4. 原型链干扰&quot;">​</a></h4><blockquote><p><code>Object</code>获取属性可能会受到其原型链上继承属性的干扰，<code>Map</code>没有原型链，插入的是什么就是什么</p></blockquote><h3 id="_6-for-in-和-for-of的区别" tabindex="-1">6. for..in 和 for..of的区别 <a class="header-anchor" href="#_6-for-in-和-for-of的区别" aria-label="Permalink to &quot;6. for..in 和 for..of的区别&quot;">​</a></h3><blockquote><p><code>for .. in</code> 用于遍历对象的可枚举属性(键)，包括原型链上的属性，通常用<code>hasOwnProperty()</code>过滤掉原型链上的属性 <code>for .. of</code> 用于遍历可迭代对象(<code>Symbol.iterator</code>)的值，如<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>TypedArray</code>、<code>arguments</code>等</p></blockquote>`,22),h=[t];function l(o,k,p,r,d,c){return i(),a("div",null,h)}const b=s(n,[["render",l]]);export{g as __pageData,b as default};
